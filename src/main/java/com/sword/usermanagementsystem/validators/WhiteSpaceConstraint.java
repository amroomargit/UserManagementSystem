package com.sword.usermanagementsystem.validators;

/*This class is called an annotation class (i.e. like how you can have interface class, regular class, etc.)
* This class is defining our own tag/annotation that we are creating (like how lombok tags are autogenerated,
* we are making our own now, and this is where we are defining what it does)*/

import jakarta.validation.Constraint;
import jakarta.validation.Payload;

import java.lang.annotation.*;

//Tells java that my annotation should appear in the generated javadoc for any class, method, or field that uses it
@Documented

/*Marks my annotation as a validation constraint. @Constraint tells validation framework (like Hibernate Validator) that
my annotation will perform some validation logic. Then, validatedBy my annotation to the validator class that actually
holds the logic to perform the check.*/
@Constraint(validatedBy = WhiteSpaceValidator.class)

//Specifies where my annotation can be used in code, so right now, it can only be used on fields, not methods or classes
@Target({ElementType.FIELD})

//Defines the lifetime of the annotation, in this example, it's only activated at runtime
@Retention(RetentionPolicy.RUNTIME)

//including @interface is what makes this class an annotation type
public @interface WhiteSpaceConstraint {

    //Error message shown when validation fails
    String message() default "Field cannot contain whitespace.";

    /* Allows you to group multiple constraints together so that you can run different sets in different contexts.
     Class<?>[] is an array of class objects of generic type (which is the <?>), generic so that we can pass any class.
     groups() is to group multiple constraints.
     default{} means empty unless specified */
    Class<?>[] groups() default{};

    /*This allows us to attach custom metadata to a constraint validation. Used by advanced frameworks or for carrying
     severity information (like marking errors as warnings).
     Class<? extends Payload> [] is an array of classes that implement the payload Interface.
     default{} means it's left empty, unless there is a custom use case. */
    Class<? extends Payload> [] payload() default{};
}
